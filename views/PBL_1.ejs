<%- include('layouts/header'); -%>
<head>
   
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .code-block {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 10px;
            font-family: monospace;
        }
        .input-area {
            width: 100%;
            height: 100px;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            font-family: monospace;
        }
        .step {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

    <%- include('layouts/navbar'); -%>

<div class="container" >
    <h1 class="text-center" style="padding-top: 60px;">Hands-On Lab: Build a Basic Banking System in C</h1>

    <p>In this lab, you will implement a simple banking system step by step. You'll write C code in the input fields and execute it to see how it works.</p>

    <!-- Step 1: Starting the C Program -->
    <div class="step">
        <h2>Step 1: Starting the C Program</h2>
        <p>Copy the following code into the input field and click "Run" to begin.</p>
        
        <!-- Code Block -->
        <div class="code-block">
            <code>
#include &lt;stdio.h&gt;<br>
#include &lt;stdlib.h&gt;<br>
#include &lt;string.h&gt;<br><br>
// Structure to hold account details<br>
struct Account {<br>
&nbsp;&nbsp;&nbsp;&nbsp;char name[100];<br>
&nbsp;&nbsp;&nbsp;&nbsp;int accountNumber;<br>
&nbsp;&nbsp;&nbsp;&nbsp;float balance;<br>
};<br><br>
// Function prototypes<br>
void createAccount(struct Account *acc);<br>
void deposit(struct Account *acc);<br>
void withdraw(struct Account *acc);<br>
void checkBalance(struct Account acc);<br><br>
int main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;struct Account user;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int choice;<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Welcome to the Basic Banking System!\\n");<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;// Step 1: Create an account<br>
&nbsp;&nbsp;&nbsp;&nbsp;createAccount(&user);<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;// Loop for user to choose operations<br>
&nbsp;&nbsp;&nbsp;&nbsp;while (1) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\\nMenu:\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("1. Deposit\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("2. Withdraw\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("3. Check Balance\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("4. Exit\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Enter your choice: ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf("%d", &choice);<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (choice) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deposit(&user);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;withdraw(&user);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBalance(user);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 4:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Exiting... Thank you!\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Invalid choice! Please try again.\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>
}<br>
            </code>
        </div>

        <!-- Dropdown for Code Explanation -->
        <div class="accordion" id="step1Explanation">
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingOne">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Code Explanation for Step 1
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#step1Explanation">
                    <div class="accordion-body">
                        <strong>#include &lt;stdio.h&gt; and &lt;stdlib.h&gt;:</strong> These are standard libraries in C that allow you to perform input/output operations (like reading input from the user or printing output) and memory management functions.<br><br>
                        <strong>struct Account:</strong> This defines a structure, which is like a custom data type, for holding account details such as name, account number, and balance.<br><br>
                        <strong>Function Prototypes:</strong> These are declarations of the functions that you'll use later in the program.<br><br>
                        <strong>int main():</strong> This is the entry point of the program, where the execution begins.<br><br>
                        <strong>While Loop:</strong> This loop allows the user to repeatedly choose different operations (like depositing money, withdrawing, etc.) until they decide to exit.<br>
                    </div>
                </div>
            </div>
        </div>

        <!-- Input field for Step 1 -->
        <textarea class="input-area" placeholder="Enter the starting code here..."></textarea>
    </div>

    <!-- Additional steps and dropdown explanations follow the same format as Step 1 -->
    <!-- Step 2: Create an Account -->
    <div class="step">
        <h2>Step 2: Create an Account</h2>
        <p>Now, let's implement the account creation function.</p>

        <!-- Code Block -->
        <div class="code-block">
            <code>
void createAccount(struct Account *acc) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\\nEnter your name: ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;getchar();<br>
&nbsp;&nbsp;&nbsp;&nbsp;fgets(acc->name, 100, stdin);<br>
&nbsp;&nbsp;&nbsp;&nbsp;acc->name[strcspn(acc->name, "\\n")] = 0;<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Enter your account number: ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;scanf("%d", &acc->accountNumber);<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;acc->balance = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Account created successfully!\\n");<br>
}
            </code>
        </div>

        <!-- Dropdown for Code Explanation -->
        <div class="accordion" id="step2Explanation">
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingTwo">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                        Code Explanation for Step 2
                    </button>
                </h2>
                <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#step2Explanation">
                    <div class="accordion-body">
                        <strong>fgets and getchar:</strong> These functions are used for reading input from the user. `fgets` is for getting strings (names), and `getchar` is to capture any leftover newline character from previous inputs.<br><br>
                        <strong>acc->balance = 0:</strong> The initial balance is set to zero when an account is created.<br>
                    </div>
                </div>
            </div>
        </div>

        <!-- Input field for Step 2 -->
        <textarea class="input-area" placeholder="Enter the createAccount function code here..."></textarea>
    </div>
<!-- Step 3: Deposit Money -->
<div class="step">
    <h2>Step 3: Deposit Money</h2>
    <p>Next, implement the deposit function:</p>
    
    <!-- Code Block -->
    <div class="code-block">
        <code>
void deposit(struct Account *acc) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;float amount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\\nEnter the amount to deposit: ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;scanf("%f", &amount);<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;if (amount <= 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Invalid amount! Please enter a valid amount.\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acc->balance += amount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Deposit successful! New balance: %.2f\\n", acc->balance);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}
        </code>
    </div>

    <!-- Dropdown for Code Explanation -->
    <div class="accordion" id="step3Explanation">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Code Explanation for Step 3
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#step3Explanation">
                <div class="accordion-body">
                    <strong>Deposit function:</strong> The user is prompted to enter a deposit amount. If the amount is less than or equal to zero, an error message is printed. Otherwise, the deposit is added to the account balance, and the new balance is displayed.
                </div>
            </div>
        </div>
    </div>

    <!-- Input field for Step 3 -->
    <textarea class="input-area" placeholder="Enter the deposit function code here..."></textarea>
</div>

<!-- Step 4: Withdraw Money -->
<div class="step">
    <h2>Step 4: Withdraw Money</h2>
    <p>Now, implement the withdraw function:</p>
    
    <!-- Code Block -->
    <div class="code-block">
        <code>
void withdraw(struct Account *acc) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;float amount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\\nEnter the amount to withdraw: ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;scanf("%f", &amount);<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;if (amount <= 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Invalid amount! Please enter a valid amount.\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;} else if (amount > acc->balance) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Insufficient balance! Withdrawal failed.\\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acc->balance -= amount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Withdrawal successful! New balance: %.2f\\n", acc->balance);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}
        </code>
    </div>

    <!-- Dropdown for Code Explanation -->
    <div class="accordion" id="step4Explanation">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFour">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                    Code Explanation for Step 4
                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#step4Explanation">
                <div class="accordion-body">
                    <strong>Withdraw function:</strong> The user is prompted to enter the amount to withdraw. If the amount is invalid or exceeds the available balance, an error message is displayed. Otherwise, the balance is reduced by the withdrawal amount.
                </div>
            </div>
        </div>
    </div>

    <!-- Input field for Step 4 -->
    <textarea class="input-area" placeholder="Enter the withdraw function code here..."></textarea>
</div>

<!-- Step 5: Check Balance -->
<div class="step">
    <h2>Step 5: Check Balance</h2>
    <p>Implement the check balance function:</p>
    
    <!-- Code Block -->
    <div class="code-block">
        <code>
void checkBalance(struct Account acc) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\\nAccount Balance: %.2f\\n", acc.balance);<br>
}
        </code>
    </div>

    <!-- Dropdown for Code Explanation -->
    <div class="accordion" id="step5Explanation">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFive">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    Code Explanation for Step 5
                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse" aria-labelledby="headingFive" data-bs-parent="#step5Explanation">
                <div class="accordion-body">
                    <strong>Check Balance function:</strong> This function simply prints the current balance of the account when called.
                </div>
            </div>
        </div>
    </div>

    <!-- Input field for Step 5 -->
    <textarea class="input-area" name="code" placeholder="Enter the step 5 code here..."></textarea>
</div>

    <!-- Step 6: Run -->
    <div class="step">
        <h2>Step 6: Test and Run</h2>
        <p>Once all your code is ready, click "Run" to see how the program works!</p>
         <form action="/execute/code" method="post">
            <textarea class="input-area" name="code" placeholder="Enter your code here..."></textarea>
            <button type="submit" class="btn btn-primary">Run Code</button>
            <div id="output" class="mt-3"></div>
        </div>
</div>
<%- include('layouts/footer'); -%>

<script>
    document.getElementById('codeForm').addEventListener('submit', function(e) {
    e.preventDefault(); // Prevent the default form submission

    const formData = new FormData(this);
    
    fetch('/execute/code', {
        method: 'POST',
        body: formData,
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.text();
    })
    .then(data => {
        document.getElementById('output').innerHTML = `<pre>${data}</pre>`;
    })
    .catch(error => {
        document.getElementById('output').innerHTML = `<pre>Error: ${error.message}</pre>`;
    });
});

</script>

<!-- Bootstrap JS CDN -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
